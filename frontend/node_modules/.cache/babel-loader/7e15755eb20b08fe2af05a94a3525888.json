{"ast":null,"code":"var _jsxFileName = \"/home/pe/Documents/Code/Projects/still-quay/frontend/src/components/QuayStatus.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass QuayStatus extends Component {\n  constructor(props) {\n    super(props);\n\n    this.findLowestTide = () => this.setState({\n      lowestTide: Math.min(...this.state.tides)\n    });\n\n    this.status = () => {\n      switch (this.state.wallType) {\n        case \"counterfort\":\n          this.setState({\n            wallFactor: 1.2\n          });\n          break;\n\n        case \"sheet piled\":\n          this.setState({\n            wallFactor: 1.1\n          });\n          break;\n\n        case \"combi-wall\":\n          this.setState({\n            wallFactor: 1.25\n          });\n          break;\n\n        default:\n          this.setState({\n            wallFactor: 1\n          });\n      }\n\n      const term1 = this.state.heightAboveBed / this.state.lowestTide;\n      const term2 = this.state.heightAboveBed * this.state.wallFactor / this.state.embedmentDepth;\n      console.log(term1 + ', ' + term2);\n\n      if (term1 > term2) {\n        this.setState({\n          safeToday: false\n        });\n      }\n    };\n\n    this.displayStatus = () => {\n      if (this.state.safeToday) {\n        return \"SAFE\";\n      } else {\n        return \"IN DANGER!\";\n      }\n    };\n\n    this.state = {\n      quayname: '',\n      stationId: '',\n      safeToday: true,\n      tides: [],\n      stationCoordinates: '',\n      stationName: '',\n      heightAboveBed: null,\n      wallType: 'sheet piled',\n      embedmentDepth: null,\n      lowestTide: null,\n      wallFactor: 1\n    };\n  }\n\n  componentDidMount() {\n    const heights = [];\n    axios.get('http://localhost:5000/quays/' + this.props.match.params.id).then(response => {\n      this.setState({\n        stationId: response.data.stationId,\n        quayname: response.data.quayname,\n        wallType: response.data.wallType,\n        embedmentDepth: response.data.embedmentDepth,\n        heightAboveBed: response.data.heightAboveBed\n      });\n      console.log(this.state.embedmentDepth);\n      console.log(this.state.stationId);\n      axios.get('http://localhost:5000/tides/' + this.state.stationId).then(response => {\n        response.data.map(tide => heights.push(Math.round(tide.Height * 100) / 100));\n        this.setState({\n          tides: heights\n        });\n        this.findLowestTide();\n        this.status();\n      }).catch(err => console.log(err));\n    }).catch(err => console.log(err));\n  }\n\n  // prepTides = () => {\n  //   const stringTides = this.state.tides.join();\n  //   let preparedTides = '';\n  //   for(let c in stringTides.length){\n  //     if(stringTides.charAt(c) === ','){\n  //       preparedTides =+ ' _, ';\n  //     } else {\n  //       preparedTides =+ c;\n  //     }\n  //   }\n  //   return preparedTides;\n  // }\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.quayname), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Tides \", this.state.tides.join()), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Lowest tide is \", this.state.lowestTide), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"The \", this.state.quayname, \" quay is currently \", this.displayStatus()));\n  }\n\n}\n\nexport default QuayStatus;","map":{"version":3,"sources":["/home/pe/Documents/Code/Projects/still-quay/frontend/src/components/QuayStatus.js"],"names":["React","Component","axios","QuayStatus","constructor","props","findLowestTide","setState","lowestTide","Math","min","state","tides","status","wallType","wallFactor","term1","heightAboveBed","term2","embedmentDepth","console","log","safeToday","displayStatus","quayname","stationId","stationCoordinates","stationName","componentDidMount","heights","get","match","params","id","then","response","data","map","tide","push","round","Height","catch","err","render","join"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport axios from 'axios';\n\nclass QuayStatus extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      quayname: '',\n      stationId: '',\n      safeToday: true,\n      tides:[],\n      stationCoordinates: '',\n      stationName:'',\n      heightAboveBed: null,\n      wallType: 'sheet piled',\n      embedmentDepth: null,\n      lowestTide: null,\n      wallFactor: 1,\n    }\n  }\n\n  componentDidMount() {\n    const heights = [];\n    axios.get('http://localhost:5000/quays/' + this.props.match.params.id)\n    .then(response => {\n      this.setState({\n        stationId: response.data.stationId,\n        quayname: response.data.quayname,\n        wallType: response.data.wallType,\n        embedmentDepth: response.data.embedmentDepth,\n        heightAboveBed: response.data.heightAboveBed\n      });\n      console.log(this.state.embedmentDepth);\n      console.log(this.state.stationId)\n      axios.get('http://localhost:5000/tides/' + this.state.stationId)\n        .then(response => {\n          response.data.map(tide => \n            heights.push(Math.round((tide.Height * 100)) / 100))\n        this.setState({tides: heights})\n        this.findLowestTide();\n        this.status();\n      })\n      .catch(err => console.log(err))}\n      )\n    .catch(err => console.log(err))\n  }\n  \n\n  findLowestTide = () => this.setState({ lowestTide: Math.min(...this.state.tides)});\n\n  \n  // Formula for safety check\n  status = () => {\n    switch(this.state.wallType){\n      case \"counterfort\":\n        this.setState({ wallFactor: 1.2});\n        break;\n      case \"sheet piled\":\n        this.setState({ wallFactor: 1.1});\n        break;\n      case \"combi-wall\":\n        this.setState({ wallFactor: 1.25});\n        break;\n      default:\n        this.setState({ wallFactor: 1});\n    }    \n    const term1 = this.state.heightAboveBed / this.state.lowestTide;\n    const term2 = this.state.heightAboveBed * this.state.wallFactor / this.state.embedmentDepth;\n    console.log(term1 +  ', ' + term2);\n    if(term1 > term2) {\n      this.setState({ safeToday: false })\n    }\n  }\n\n  displayStatus = () => {\n    if(this.state.safeToday){\n      return \"SAFE\";\n    } else {\n      return \"IN DANGER!\";\n    }\n  }\n\n  // prepTides = () => {\n  //   const stringTides = this.state.tides.join();\n  //   let preparedTides = '';\n  //   for(let c in stringTides.length){\n  //     if(stringTides.charAt(c) === ','){\n  //       preparedTides =+ ' _, ';\n  //     } else {\n  //       preparedTides =+ c;\n  //     }\n  //   }\n  //   return preparedTides;\n  // }\n\n\n\n  render() {\n\n    return(\n      <div>\n        <h3>{this.state.quayname}</h3>\n        <p>\n          Tides {this.state.tides.join()}\n        </p>\n        <p>\n          Lowest tide is {this.state.lowestTide}\n        </p>\n        <p>\n          The {this.state.quayname} quay is currently {this.displayStatus()}\n        </p>\n      </div>\n\n    );\n  }\n}\n\nexport default QuayStatus;"]},"metadata":{},"sourceType":"module"}