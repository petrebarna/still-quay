{"ast":null,"code":"var _jsxFileName = \"/home/pe/Documents/Code/Projects/still-quay/frontend/src/components/QuayStatus.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass QuayStatus extends Component {\n  constructor(props) {\n    super(props);\n\n    this.status = () => {\n      const term1 = this.state.heightAboveBed / this.state.lowestTide;\n      const term2 = this.state.heightAboveBed * this.state.wallFactor / this.state.embedmentDepth;\n\n      if (term1 > term2) {\n        this.setState({\n          safeToday: false\n        });\n      }\n    };\n\n    this.state = {\n      quayname: '',\n      stationId: '',\n      safeToday: true,\n      tides: [],\n      stationCoordinates: '',\n      stationName: '',\n      heightAboveBed: null,\n      wallType: 'sheet piled',\n      embedmentDepth: null,\n      lowestTide: null,\n      wallFactor: null\n    };\n  }\n\n  componentDidMount() {\n    const heights = [];\n    axios.get('http://localhost:5000/quays/' + this.props.match.params.id).then(response => {\n      this.setState({\n        stationId: response.data.stationId,\n        quayname: response.data.quayname,\n        wallType: response.data.wallType,\n        embedmentDepth: response.data.embedmentDepth,\n        heightAboveBed: response.data.heightAboveBed\n      });\n      axios.get('http://localhost:5000/tides/' + this.state.stationId).then(response => {\n        response.data.map(tide => heights.push(Math.round(tide.Height * 100) / 100));\n        this.setState({\n          tides: heights\n        });\n      }).catch(err => console.log(err));\n    }).catch(err => console.log(err));\n  } // Formula for safety check\n\n\n  // prepTides = () => {\n  //   const stringTides = this.state.tides.join();\n  //   let preparedTides = '';\n  //   for(let c in stringTides.length){\n  //     if(stringTides.charAt(c) === ','){\n  //       preparedTides =+ ' _, ';\n  //     } else {\n  //       preparedTides =+ c;\n  //     }\n  //   }\n  //   return preparedTides;\n  // }\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.state.quayname), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Tides \", this.state.tides.join()), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"The \", this.state.quayname, \" quay is currently \", this.status()));\n  }\n\n}\n\nexport default QuayStatus;","map":{"version":3,"sources":["/home/pe/Documents/Code/Projects/still-quay/frontend/src/components/QuayStatus.js"],"names":["React","Component","axios","QuayStatus","constructor","props","status","term1","state","heightAboveBed","lowestTide","term2","wallFactor","embedmentDepth","setState","safeToday","quayname","stationId","tides","stationCoordinates","stationName","wallType","componentDidMount","heights","get","match","params","id","then","response","data","map","tide","push","Math","round","Height","catch","err","console","log","render","join"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport axios from 'axios';\n\nclass QuayStatus extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      quayname: '',\n      stationId: '',\n      safeToday: true,\n      tides:[],\n      stationCoordinates: '',\n      stationName:'',\n      heightAboveBed: null,\n      wallType: 'sheet piled',\n      embedmentDepth: null,\n      lowestTide: null,\n      wallFactor: null,\n    }\n  }\n\n  componentDidMount() {\n    const heights = [];\n    axios.get('http://localhost:5000/quays/' + this.props.match.params.id)\n    .then(response => {\n      this.setState({\n        stationId: response.data.stationId,\n        quayname: response.data.quayname,\n        wallType: response.data.wallType,\n        embedmentDepth: response.data.embedmentDepth,\n        heightAboveBed: response.data.heightAboveBed\n      });\n      axios.get('http://localhost:5000/tides/' + this.state.stationId)\n        .then(response => {\n          response.data.map(tide => \n            heights.push(Math.round((tide.Height * 100)) / 100))\n        this.setState({tides: heights})})\n      .catch(err => console.log(err))}\n      )\n    .catch(err => console.log(err))\n  }\n  \n  \n  // Formula for safety check\n  status = () => {\n    const term1 = this.state.heightAboveBed / this.state.lowestTide;\n    const term2 = this.state.heightAboveBed * this.state.wallFactor / this.state.embedmentDepth;\n    if(term1 > term2) {\n      this.setState({ safeToday: false })\n    }\n  }\n\n  // prepTides = () => {\n  //   const stringTides = this.state.tides.join();\n  //   let preparedTides = '';\n  //   for(let c in stringTides.length){\n  //     if(stringTides.charAt(c) === ','){\n  //       preparedTides =+ ' _, ';\n  //     } else {\n  //       preparedTides =+ c;\n  //     }\n  //   }\n  //   return preparedTides;\n  // }\n\n\n\n  render() {\n\n    return(\n      <div>\n        <h3>{this.state.quayname}</h3>\n        <p>\n          Tides {this.state.tides.join()}\n        </p>\n        <p>\n          The {this.state.quayname} quay is currently {this.status()}\n        </p>\n      </div>\n\n    );\n  }\n}\n\nexport default QuayStatus;"]},"metadata":{},"sourceType":"module"}